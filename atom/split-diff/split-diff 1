require 'test_helper'
class CheckcallsTest < ActiveSupport::TestCase
  NUM_HISTORY_ITEMS = 20

  include Rack::Test::Methods
  def app
    Rails.application
  end
  setup do
    person = admin_befriender(:befriender_harrypotter)
    @group = person.matching_groups.first
  end
  it 'Should reject unauthenticated inputs' do
    get "/api/groups/#{@group.id}/checkcalls"
    last_response.unauthorized?.must_equal true
  end
  it 'Should give checkcalls history' do
    set_auth_header
    get "/api/groups/#{@group.id}/checkcalls"
    last_response.unauthorized?.must_equal false, '401 Unauthorized'
    last_response.ok?.must_equal true, 'Response not OK'
    json_response = JSON.parse(last_response.body)
    json_response.must_be_kind_of Array, 'Response is not an array'
    json_response.length.wont_equal 0, 'Response is empty array'
    json_response.each do |group|
      group.must_include 'id'
      group.must_include 'date'
      group.must_include 'checkcall_type'
      group.must_include 'is_approved'
    end
  end
  it 'should paginate checkcalls history' do
    set_auth_header
    seed_checkcalls(@group)
    get "/api/groups/#{@group.id}/checkcalls"
    json_response = JSON.parse(last_response.body)
    json_response.length.must_be(:<=, NUM_HISTORY_ITEMS)
    prev_response = last_response
    get "/api/groups/#{@group.id}/checkcalls?offset=#{json_response.length}"
    json_2_response = JSON.parse(last_response.body)
    json_2_response.wont_equal(json_response)
    last_response.wont_equal(prev_response)
  end
  it 'should return detailed checkcall information' do
    set_auth_header
    checkcall = @group.checkcalls.first
    checkcall.wont_be_nil
    get "/api/groups/#{@group.id}/checkcalls/#{checkcall.id}"
    last_response.unauthorized?.must_equal false, '401 Unauthorized'
    last_response.ok?.must_equal true, 'Response not OK'
    response = JSON.parse(last_response.body)
    response.must_be_kind_of Hash, 'Response is not an hash'
    response.must_include 'date'
    response['group_remarks'].must_equal checkcall.remarks
    [response['befrienders'], response['staff']].each do |collection|
      collection.each do |person|
        person.must_include 'id'
        person.must_include 'name'
      end
    end
    response['befriendees'].each do |person|
      person.must_include 'id'
      person.must_include 'name'
      person.must_include 'status'
    end
  end
  it 'should successfully create checkcalls' do
    set_auth_header
    person = admin_befriender(:befriender_harrypotter)
    get "/api/groups/#{@group.id}"
    response = JSON.parse(last_response.body)
    set_auth_header
    post_json "/api/groups/#{@group.id}/checkcalls", {
      date: Time.now,
      befriendees: response['befriendees'].map do |person|
          {
            id: person['id'],
            status: ['Not In', 'Visited'].sample,
            remarks: 'Person test comment'
          }
      end,
      befrienders: response['befrienders'].map do |person|
        person['id']
      end,
      staff: response['staff'].map do |person|
        person['id']
      end,
      type: 'Home Visit',
      remarks: 'Hello yes this is test'
    }
    last_response.unauthorized?.must_equal false, '401 Unauthorized'
    last_response.created?.must_equal true, "Response not OK, #{last_response.status}"
    response = Integer(last_response.body)
    response.must_be_kind_of Integer, 'Response is not an integer'
    checkcall = Operation::Checkcall.find(response)
    checkcall.wont_be_nil 'Checkcall was not created!'
    checkcall.creator.username.must_equal users(:user_harrypotter).username
  end
  # For some bizarre reason the route doesn't work in testing but it does in production
  # it "should successfully modify checkcalls" do
  #   set_auth_header
  #   @checkcall = @group.checkcalls.new
  #   @checkcall.checkcall_date = Time.now - 86400
  #   check_time = @checkcall.checkcall_date
  #   @checkcall.checkcall_type = 1
  #   @checkcall.approval_date = nil
  #   @checkcall.approver_id = nil
  #   @checkcall.save!
  #   @checkcall.befrienders.length.must_equal 0
  #   @checkcall.befriendees.length.must_equal 0
  #   @checkcall.staff.length.must_equal 0
  #   person = admin_befriender(:befriender_harrypotter)
  #   puts "Posting to /api/groups/#{@group.id}/checkcalls/#{@checkcall.id}"
  #   post_json "/api/groups/#{@group.id}/checkcalls/#{@checkcall.id}", {
  #     date: Time.now,
  #     befriendees: @group.befriendees do |person|
  #         {
  #           id: person.id,
  #           status: ['Not In', 'Visited'].sample
  #         }
  #       end,
  #     befrienders: @group.befrienders do |person|
  #       person.id
  #     end,
  #     staff: @group.staff.map do |person|
  #       person.id
  #     end,
  #     type: 1,
  #     remarks: "Hello yes this is test"
  #   }
  #   last_response.unauthorized?.must_equal false, "401 Unauthorized"
  #   last_response.created?.must_equal true, "Response not OK, #{last_response.status}"
  #   response = Integer(last_response.body)
  #   response.must_be_kind_of Integer, "Response is not an integer"
  #   @checkcall.reload
  #   @checkall.checkcall_date.wont_equal check_time
  #   @checkcall.befriendees.length.must_equal @group.befriendees.length
  #   @checkcall.befrienders.length.must_equal @group.befrienders.length
  #   @checkcall.staff.length.must_equal @group.staff.length
  # end
  def seed_checkcalls(mg)
    Operation::Checkcall.transaction do
      id = mg.id
      region_id = mg.region_id
      matching_records = mg.matching_records
      bfr_ids = matching_records.where { item_type == 'Admin::Befriender' }.pluck(:item_id)
      bfe_ids = matching_records.where { item_type == 'Admin::Befriendee' }.pluck(:item_id)

      num_checkcalls = NUM_HISTORY_ITEMS + rand(10)
      num_checkcalls.times do
          cc = Operation::Checkcall.new(matching_group_id: id,
          checkcall_type: Operation::Checkcall.checkcall_types.keys.sample,
          checkcall_date: 3.months.ago,
          creator_id: users(:user_one).id)

          cc.save!
          num_bfrs = rand(bfr_ids.length)
          num_bfes = rand(bfe_ids.length)
          bfr_ids_random = bfr_ids.sort { rand - 0.5 }[0..num_bfrs]
          bfe_ids_random = bfe_ids.sort { rand - 0.5 }[0..num_bfes]

          bfr_ids_random.each do |id|
            cc.checkcall_records.build(person_id: id,
              person_type: 'Admin::Befriender',
              region_id: region_id)
          end
          bfe_ids_random.each do |id|
            cc.checkcall_records.build(person_id: id,
              person_type: 'Admin::Befriendee',
              region_id: region_id)
          end

          cc.save!
      end
    end
  end
end
